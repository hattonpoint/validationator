var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (a) { return typeof a } : function (a) { return a && typeof Symbol === 'function' && a.constructor === Symbol && a !== Symbol.prototype ? 'symbol' : typeof a }; function _toConsumableArray (a) { if (Array.isArray(a)) { for (var b = 0, c = Array(a.length); b < a.length; b++)c[b] = a[b]; return c } return Array.from(a) } var getFuncParamNames = function (a) { var b = /(\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s*=[^,)]*(('(?:\\'|[^'\r\n])*')|("(?:\\"|[^"\r\n])*"))|(\s*=[^,)]*))/mg, c = /([^\s,]+)/g, d = a.toString().replace(b, ''), e = d.slice(d.indexOf('(') + 1, d.indexOf(')')).match(c); return e[0] === '{' && e[e.length - 1 === '}'] && (e = e.slice(1, -1)), e === null && (e = []), e }, includesAnyTest = function (a, b) { var c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, d = !1; c.ignoreCase && (a = a.toLowerCase()), c.stringify && (a = JSON.stringify(a)); for (var e, f = 0; f < b.length; f++) if (e = b[f], c.ignoreCase && (e = e.toLowerCase()), c.stringify && (e = JSON.stringify(e)), a.includes(e)) { d = !0; break } return d }, matchesAny = function (a, b) { var c = !1; return b.forEach(function (b) { b === a && (c = !0) }), c }, validate = function a (b, c) { var d = c.name || '', e = c.on || a.on, f = c.off || a.off, g = c.warn || a.warn, h = c.bool || a.bool, i = function () { return (process.env.NODE_ENV === 'production' || f) && (!e || !h) }, j = function (d) { var e = 0, f = []; if (c.forEach(function (c) { f.push(c); try { a(b, c) } catch (a) { e++ } }), e === f.length) throw new Error(d + ': ' + b + ' did not match any of the types: ' + f.toString()) }, k = function (a) { var b = !1; return c.acceptedNulls && c.acceptedNulls.forEach(function (c) { c === a && (b = !0) }), b }; try { if (i()) return b; if (Array.isArray(c))j(d); else { if (!b && !k(b)) { if (c.notRequired) return !!h || void 0; if (g && console.warn("Value '" + d + ': ' + b + "' is required!"), h) return !1; throw new Error("Value '" + d + ': ' + b + "' is required!") } if (typeof c === 'string' && (c = {type: c}), !c.type) throw new Error(d + ': ' + b + '.type is required'); c.extend && c.extend(b, c); var l = [{type: 'array', rules: function (b, c, d) { var e = c.maxLen, f = c.minLen, g = c.allChildren, h = c.children, i = c.includes, j = c.notIncludes, k = c.includesAny, l = c.notIncludesAny; if (!Array.isArray(b)) throw new Error('Expected ' + d + ': ' + b + ' to be type array. Got ' + (typeof b === 'undefined' ? 'undefined' : _typeof(b)) + '.'); if (typeof f !== 'undefined' && b.length < f) throw new Error('Array ' + d + ': ' + b + ' length is ' + b.length + '. Less than minimum ' + f + '.'); if (typeof e !== 'undefined' && b.length > e) throw new Error('Array ' + d + ': ' + b + ' is ' + b.length + '. More than maximum ' + e + '.'); if (typeof i !== 'undefined' && !JSON.stringify(b).includes(JSON.stringify(i))) throw new Error('Array ' + d + ': ' + b + ' does not include required string: ' + i + '.'); if (typeof j !== 'undefined' && JSON.stringify(b).includes(JSON.stringify(j))) throw new Error('Array ' + d + ': ' + b + ' includes blacklisted string: ' + j + '.'); if (typeof k !== 'undefined' && !includesAnyTest(b, k, {stringify: !0})) throw new Error('Array ' + d + ': ' + b + ' does not include required string from: ' + k + '.'); if (typeof l !== 'undefined' && includesAnyTest(b, l, {stringify: !0})) throw new Error('Array ' + d + ': ' + b + ' includes blacklisted string from: ' + l + '.'); if (g && b.forEach(function (c, d) { g.name = g.name || d, a(b[d], g) }), h) { if (!Array.isArray(h)) throw new Error(d + ': ' + b + '. Children must be an array. Got type ' + (typeof h === 'undefined' ? 'undefined' : _typeof(h)) + '.'); h.forEach(function (c, d) { typeof c === 'string' && (c = {type: c}), c.name = c.name || d, a(b[d], c) }) } }}, {type: 'function', rules: function (a, b, c) { if (typeof a !== 'function') throw new Error('Expected ' + c + ': ' + a + ' to be type function. Got ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + '.') }}, {type: 'object', rules: function (b, c, d) { var e = c.requiredKeys, f = c.children, g = c.minLen, h = c.maxLen, i = c.allChildren, j = c.includes, k = c.notIncludes, l = c.includesAny, m = c.notIncludesAny, n = Object.keys(b); if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== 'object' || Array.isArray(b)) throw new Error('Expected ' + d + ': ' + b + ' to be type object. Got type ' + (typeof b === 'undefined' ? 'undefined' : _typeof(b)) + '. Array.isArray? ' + Array.isArray(b) + '.'); if (e && e.forEach(function (a) { if (!n.find(function (b) { return b === a })) throw new Error(d + ': ' + b + ' missing required key: ' + a + '.') }), typeof j !== 'undefined' && !JSON.stringify(b).includes(JSON.stringify(j))) throw new Error('Object ' + d + ': ' + b + ' does not include required string: ' + j + '.'); if (typeof k !== 'undefined' && JSON.stringify(b).includes(JSON.stringify(k))) throw new Error('Object ' + d + ': ' + b + ' includes blacklisted string: ' + k + '.'); if (typeof g !== 'undefined' && n.length < g) throw new Error('Object ' + d + ': ' + b + ' length is ' + n.length + '. Less than minimum ' + g + '.'); if (typeof h !== 'undefined' && n.length > h) throw new Error('Object ' + d + ': ' + b + ' length is ' + n.length + ' more than maximum ' + h + '.'); if (typeof l !== 'undefined' && !includesAnyTest(b, l, {stringify: !0})) throw new Error('Object ' + d + ': ' + b + ' does not include required string from: ' + l + '.'); if (typeof m !== 'undefined' && includesAnyTest(b, m, {stringify: !0})) throw new Error('Object ' + d + ': ' + b + ' includes blacklisted string from: ' + m + '.'); if (i && n.forEach(function (c) { return a(b[c], i, {name: c}) }), f) { if ((typeof f === 'undefined' ? 'undefined' : _typeof(f)) !== 'object' || Array.isArray(f)) throw new Error('Expected ' + d + ': ' + b + ' validation children to be type object. Got type ' + (typeof b === 'undefined' ? 'undefined' : _typeof(b)) + ' Array.isArray? ' + Array.isArray(b) + '.'); var o = Object.keys(f); o.forEach(function (c) { var d = f[c]; typeof d === 'string' && (d = {type: d}), d.name = d.name || c, a(b[c], d) }) } }}, {type: 'string', rules: function (a, b, c) { var d = b.maxLen, e = b.minLen, f = b.regEx, g = b.includes, h = b.notIncludes, i = b.includesAny, j = b.notIncludesAny; if (typeof a !== 'string') throw new Error('Expected ' + c + ': ' + a + ' to be type string. Got type ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + '.'); if (typeof e !== 'undefined' && a.length < e) throw new Error('String "' + c + ': ' + a + '" length is ' + a.length + '. Less than minimum ' + e + '.'); if (typeof d !== 'undefined' && a.length > d) throw new Error('String "' + c + ': ' + a + '" length is ' + a.length + '. more than maximum.'); if (typeof f !== 'undefined' && !f.test(a)) throw new Error('String "' + c + ': ' + a + '" does not match the validation regEx ' + f + '.'); if (typeof g !== 'undefined' && !a.includes(g)) throw new Error('String "' + c + ': ' + a + '" does not include required string: ' + g + '.'); if (typeof h !== 'undefined' && a.includes(h)) throw new Error('String "' + c + ': ' + a + '" includes blacklisted string: ' + h + '.'); if (typeof i !== 'undefined' && !includesAnyTest(a, i)) throw new Error('String "' + c + ': ' + a + '" does not include any required string from: [' + i + '].'); if (typeof j !== 'undefined' && includesAnyTest(a, j)) throw new Error('String "' + c + ': ' + a + '" includes a blacklisted string from: [' + j + '].') }}, {type: 'number', rules: function (a, b, c) { var d = b.max, e = b.min, f = b.decimals, g = b.regEx; if (typeof a !== 'number') throw new Error('Expected ' + c + ': ' + a + ' to be type number. Got ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + '.'); if (typeof e !== 'undefined' && a < e) throw new Error('Number ' + c + ': ' + a + ' is less than minimum ' + e + '.'); if (typeof d !== 'undefined' && a > d) throw new Error('Number ' + c + ': ' + a + ' is more than maximum ' + d + '.'); var h; if (typeof f !== 'undefined' && (function () { var b = a.toString().split('.'); if (b[1]) return h = b[1].length, h > f }())) throw new Error('Number: ' + a + ' has ' + h + ' decimals. More than max ' + f + '.'); if (typeof g !== 'undefined' && !g.test(a)) throw new Error('Number ' + c + ': ' + a + ' does not match regEx ' + g + '.') }}, {type: 'boolean', rules: function (a, b, c) { if (typeof a !== 'boolean') throw new Error('Expected ' + c + ': ' + a + ' to be type boolean. Got ' + (typeof a === 'undefined' ? 'undefined' : _typeof(a)) + '.') }}, {type: 'email', rules: function (b, c, d) { a(b, {type: 'string', name: d, maxLen: 50, regEx: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/}) }}]; return a.extensions && (l = [].concat(_toConsumableArray(l), _toConsumableArray(a.extensions))), l.forEach(function (a) { c.type.toLowerCase() === a.type && a.rules(b, c, d) }), !!h || b } } catch (a) { if (g && !h) return console.warn(a), b; if (h) return g && console.warn(a), !1; throw a } }, validateFunc = function (a, b) { var c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}; try { var d = c.name || a.name; if (b = Array.isArray(b) ? b : [b], (process.env.NODE_ENV === 'production' || c.off) && !c.on) return a.apply(void 0, _toConsumableArray(b)); var e = a.inputModel, f = a.outputModel; if (!a) throw new Error('Missing required argument func'); if (typeof a !== 'function') throw new Error('First argument is not a function!'); if (!e && !f) throw new Error('ERROR: No validation props set for ' + d + '. Please specify ' + d + '.inputModel or ' + d + '.outputModel'); e && !f && validateInput(b, e, a, d), f && !e && validate(a.apply(void 0, _toConsumableArray(b)), f, {name: d}), e && f && (validateInput(b, e, a, d), validate(a.apply(void 0, _toConsumableArray(b)), f, {name: d})) } catch (d) { if (c.warn) return console.warn(d), a.apply(void 0, _toConsumableArray(b)); throw d } return a.apply(void 0, _toConsumableArray(b)) }, validateInput = function (a, b, c, d) { var e = getFuncParamNames(c); if (typeof b.type === 'string' || typeof b === 'string') { if (a.length > 1) throw new Error('ERROR: ' + d + ' expected 1 parameter but received ' + a.length); return void validate(a[0], b, {name: e[0]}) } if (Array.isArray(b)) { if (b.length !== e.length) throw new Error('ERROR: parameters and input model for ' + d + ' are out of sync. There are ' + b.length + ' entries to the inputModel and ' + e.length + ' paramerters.'); if (!Array.isArray(a)) throw new Error('ERROR: Multiple params must me passed into validateFunc as an array.'); return void b.forEach(function (b, c) { validate(a[c], b, {name: e[c]}) }) } if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') { if (a = a[0], (typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== 'object' || Array.isArray(a)) throw new Error('Error: Expected a single object as the sole function param (ES6 parameter destructuring).'); var f = Object.keys(b), g = Object.keys(a); if (f.length !== g.length) throw new Error('ERROR: parameters and input model for ' + d + ' are out of sync. There are ' + f.length + ' entries to the inputModel and ' + g.length + ' paramerters.'); return g.forEach(function (a) { if (!matchesAny(a, e)) throw new Error("ERROR: The paramKey '" + a + "' does not match any of the available parameters: " + e.toString()); if (!matchesAny(a, f)) throw new Error("ERROR: The paramKey '" + a + "' has not been included " + d + '.inputModel') }), void f.forEach(function (c) { validate(a[c], b[c], {name: c}) }) } throw new Error('UNKNOWN ERROR: the function input model did not match the api spec.') }; (function (a) { var b = {validate: validate, validateFunc: validateFunc}; typeof module !== 'undefined' && module.exports ? (module.exports = b, a._ = b) : a._ = b })(this)
